
fn beeboo(i: u32, first:bool) -> bool {
  if (i > 5 )|| (i < 5) {}

  if first {
    i>5
  } else {
    i < 5
  }
}

FUNCTION ENTRY

  pushq %rbp
  movq %rsp, %rbp
  subq $64, %rsp
  movb %sil, %al

CONDITION (with or)

  cmpl $5, %edi
  movb %al, -58(%rbp)
  movl %edi, -64(%rbp)
  jbe .LBB1_3
.LBB1_1:
  movb $1, -49(%rbp)
  jmp .LBB1_4
.LBB1_2:
  movb $0, -49(%rbp)
  jmp .LBB1_4
.LBB1_3:
  movl -64(%rbp), %eax
  cmpl $5, %eax
  jb .LBB1_1
  jmp .LBB1_2
.LBB1_4:
  testb $1, -49(%rbp)
  je .LBB1_6

CONDITION (with and)

  cmpl $5, %edi
  movb %al, -58(%rbp)
  movl %edi, -64(%rbp)
  ja .LBB1_3
  jmp .LBB1_2
.LBB1_1:
  movb $1, -49(%rbp)
  jmp .LBB1_4
.LBB1_2:
  movb $0, -49(%rbp)
  jmp .LBB1_4
.LBB1_3:
  movl -64(%rbp), %eax
  cmpl $5, %eax
  jb .LBB1_1
  jmp .LBB1_2
.LBB1_4:
  testb $1, -49(%rbp)
  je .LBB1_6


FIRST RETURN

  movl -64(%rbp), %eax
  cmpl $5, %eax
  seta %cl
  andb $1, %cl
  movb %cl, -57(%rbp)

SECOND RETURN

  movl -64(%rbp), %eax
  cmpl $5, %eax
  setb %cl
  andb $1, %cl
  movb %cl, -57(%rbp)

LEAVE THE FUNCTION 

  movb -57(%rbp), %al
  andb $1, %al
  movzbl %al, %eax
  addq $64, %rsp
  popq %rbp
  retq
